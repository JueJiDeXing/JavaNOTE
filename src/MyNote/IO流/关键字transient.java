package MyNote.IO流;

public class 关键字transient {
    /**
    <h1>transient</h1>
    <h3>作用:告诉编译器，在序列化对象时，不需要将被transient修饰的变量的值保存到持久化存储中。</h3>

    当一个Java对象需要进行序列化（将对象转化为字节流以便存储或传输）时，对象的所有成员变量都会被转化为字节流。<br>
    然而，并不是所有的变量都适合被序列化，比如一些敏感的信息或者临时状态变量。<br>
    这时，我们可以使用transient关键字来标记这些变量，让编译器在序列化时忽略它们。<br>

    具体来说，transient的作用有以下几个方面：<br>
    <ul>
     <li>
    避免敏感信息泄露：<br>
    有些变量可能包含敏感的信息，如密码、密钥等。<br>
    如果将这些信息存储到持久化存储中，可能会产生安全隐患。<br>
    通过使用transient关键字，我们可以防止这些信息被序列化和持久化。<br>
     </li>
     <li>
    节省存储空间：<br>
    某些变量可能在序列化时并不需要保存，例如临时计算的结果或缓存的数据。<br>
    将这些变量标记为transient可以减少序列化后的字节流的大小，节省存储空间。<br>
     </li>
     <li>
    提高序列化的性能：<br>
    transient关键字可以避免对不必要的变量进行序列化和反序列化操作。这可以提高序列化的速度和效率。<br>
     </li>
     </ul>
    被transient修饰的变量在反序列化时，会被赋予默认值（基本类型为0，对象类型为null）。<br>
     如果我们需要在反序列化时重新设置这些变量的值，可以使用自定义的readObject()方法来实现。<br>
    <p>
    <h3>总结:transient关键字在Java中的作用是控制对象在序列化时的行为，可以用来保护敏感信息、节省存储空间和提高性能。</h3>
     */
    transient int a;

}
